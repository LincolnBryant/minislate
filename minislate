#!/usr/bin/env python

from pprint import pprint

from shlex import split
import subprocess
import argparse
import os

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="commands", dest="c1")
init = subparsers.add_parser('init', help='initialize minislate containers')
init.add_argument('-p', '--port', '--publish', dest='ports', action='append', nargs='?',
                  metavar='hostPort:containerPort', help='Example: `./minislate init -p 3000:3000`')
init.add_argument('-v', '--volume', dest='volumes', action='append', nargs='?',
                  metavar='hostDir:containerDir', help='Example: `./minislate init -v ~/workdir:/mnt`')
subparsers.add_parser('pause', help='pause minislate containers')
subparsers.add_parser('unpause', help='unpause minislate containers')
subparsers.add_parser('destroy', help='completely destroy environment')
subparsers.add_parser('status', help='view status of minislate containers')
build = subparsers.add_parser('build', help='build/rebuild container images')
build.add_argument('c2', metavar='container', nargs='?', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./minislate build slate`')
shell = subparsers.add_parser(
    'shell', help='open a shell in a minislate container')
shell.add_argument('c2', metavar='container', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./minislate shell slate`')
slate = subparsers.add_parser('slate', help='run a slate command')
slate.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./minislate slate vo list`')
kubectl = subparsers.add_parser('kubectl', help='run a kubectl command')
kubectl.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                     help='Example: `./minislate kubectl get po --all-namespaces`')
exec_ = subparsers.add_parser('exec', help='wrapper of "docker-compose exec"')
exec_.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./minislate exec kube ip addr`')
args = parser.parse_args()

try:
  from subprocess import DEVNULL  # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'wb')


def initcheck(initerr='MiniSLATE is not initialized. Run: `./minislate init`'):
    if not os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(initerr)


def readycheck(rdyerr='MiniSLATE has non-ready containers. Is the environment paused?'):
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Up"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError(rdyerr)


def run(cmd):
  return subprocess.call(split(cmd))


if args.c1 == 'init':
    if os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(
            'MiniSLATE is already initialized. Run `./minislate destroy && ./minislate init` to reset your environment.')
    ports = []
    volumes = []
    if args.ports:
        for item in args.ports:
            ports.append('      - ' + item)
    if args.volumes:
        for item in args.volumes:
            volumes.append('      - ' + item)
    ports = '\n'.join(ports)
    volumes = '\n'.join(volumes)
    with open('docker-compose-template.txt', 'r') as file:
        contents = file.read()
    contents = contents.replace('# {PORTS}', ports)
    contents = contents.replace('# {VOLUMES}', volumes)
    with open('docker-compose.yml', 'w') as file:
        file.write(contents)
        file.flush()
        os.fsync(file)
    if(run('docker-compose up -d') == 0):
      run('docker-compose exec kube ./init.sh')
      run('docker-compose exec slate ./init.sh')
elif args.c1 == 'pause':
  initcheck()
  readycheck(rdyerr='It appears MiniSLATE is already paused.')
  run('docker-compose pause')
elif args.c1 == 'unpause':
  initcheck()
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Paused"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError('MiniSLATE is not paused.')
  run('docker-compose unpause')
elif args.c1 == 'destroy':
    initcheck()
    run('docker-compose down -v')
    os.remove('docker-compose.yml')
elif args.c1 == 'build':
    if args.c2:
        run('docker-compose -f docker-compose-template.txt build --no-cache ' + args.c2)
    else:
        run('docker-compose -f docker-compose-template.txt build --no-cache')
elif args.c1 == 'shell':
  initcheck()
  readycheck()
  run('docker-compose exec ' + args.c2 + ' /bin/bash')
elif args.c1 == 'status':
  initcheck()
  run('docker-compose ps')
elif args.c1 == 'slate':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate slate ' + c2)
elif args.c1 == 'kubectl':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate kubectl ' + c2)
elif args.c1 == 'exec':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec ' + c2)
else:
  raise ValueError('Invalid argument: ' + args.c1)
